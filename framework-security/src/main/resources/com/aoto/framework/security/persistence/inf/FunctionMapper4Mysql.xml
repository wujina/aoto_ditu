<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aoto.framework.security.persistence.inf.FunctionMapper">

  <resultMap id="funTreeMap" type="map">
    <id column="FUN_ID" property="id" javaType="int" jdbcType="NUMERIC" />
    <result column="FUN_NAME" property="text" javaType="String" jdbcType="VARCHAR" />
    <result column="STATE" property="state" javaType="String" jdbcType="VARCHAR" />    
    <association property="attributes" javaType="map" resultMap="funTreeAttrMap" />
    <collection property="children" ofType="TreeJson" column="{parentId=FUN_ID,userId=USER_ID}" select="selectFunsByParentId" />
  </resultMap>
  
  <resultMap id="funTreeAttrMap" type="map">
    <result column="PARENT_ID" property="parentId" javaType="int" jdbcType="NUMERIC" />
    <result column="SORT_NUM" property="sortNum" javaType="int" jdbcType="NUMERIC" />
    <result column="LEVEL_NUM" property="levelNum" javaType="int" jdbcType="NUMERIC" />
  </resultMap>
  
  <resultMap id="functionTreeMap" type="map">
    <id column="FUN_ID" property="funId" javaType="int" jdbcType="NUMERIC" />
    <result column="FUN_NAME" property="funName" javaType="String" jdbcType="VARCHAR" />    
    <collection property="children" ofType="TreeJson" column="{parentId=FUN_ID,userId=USER_ID}" select="selectFunctionsForTree" />
  </resultMap>
  
  <resultMap id="selectFunctionsByUserIdMap" type="map">
    <id column="FUN_ID" property="funId" javaType="int" jdbcType="NUMERIC" />
    <result column="ENABLED" property="enabled" javaType="boolean" jdbcType="NUMERIC" />
  </resultMap>
  
  <insert id="insertFunUrl" parameterType="map">
    INSERT INTO SYS_FUN_URL (FUN_ID, URL_ID) VALUES (#{funId,jdbcType=NUMERIC}, #{urlId,jdbcType=NUMERIC})
  </insert>
  
  <delete id="deleteFunUrl" parameterType="int">
    DELETE FROM SYS_FUN_URL WHERE FUN_ID = #{funId,jdbcType=NUMERIC}
  </delete>
  
  <select id="selectFunctions" resultType="int">
    SELECT FUN_ID FROM SYS_FUN WHERE DELETED = 0 ORDER BY SORT_NUM ASC
  </select>
  
  <select id="selectFunctionsForTree" parameterType="map" resultMap="functionTreeMap">
    <choose>
      <when test="userId > 0">
          {call SELECT_FUNS_FOR_TREE(#{parentId,jdbcType=NUMERIC}, #{userId,jdbcType=NUMERIC})}
      </when>
      <otherwise>
          SELECT FUN_ID, FUN_NAME,${userId} as USER_ID FROM SYS_FUN WHERE DELETED = 0 AND PARENT_ID = #{parentId,jdbcType=NUMERIC} ORDER BY SORT_NUM ASC
      </otherwise>
    </choose>
  </select>
  
  <select id="selectFunsByParentId" parameterType="map" resultMap="funTreeMap">
    <choose>
      <when test="userId > 0">
          {call SELECT_FUNS_BY_PARENT_ID(#{parentId,jdbcType=NUMERIC}, #{userId,jdbcType=NUMERIC})}                 
      </when>
      <otherwise>
          SELECT o.FUN_ID, o.FUN_NAME,o.PARENT_ID,o.SORT_NUM, o.LEVEL_NUM, (select case when count(1)=0 then 'open' else 'closed' end from SYS_FUN where DELETED = 0 AND parent_id = o.fun_id) as state,${userId} as USER_ID 
          FROM SYS_FUN o WHERE o.DELETED = 0 AND o.PARENT_ID = #{parentId,jdbcType=NUMERIC} ORDER BY o.SORT_NUM ASC
      </otherwise>
    </choose>    
  </select>
  
  <select id="selectCountByFunId" parameterType="map" resultType="int">
    SELECT COUNT(1) FROM sys_fun where FUN_ID = #{funId,jdbcType=NUMERIC}
  </select>
  <select id="selectCountByNameAndParentId" parameterType="map" resultType="int">
    SELECT COUNT(1) FROM sys_fun where FUN_NAME = #{funName,jdbcType=VARCHAR} AND PARENT_ID = #{parentId,jdbcType=NUMERIC} AND DELETED = 0
    <if test="funId > 0">
      AND FUN_ID != #{funId,jdbcType=NUMERIC}
    </if>
  </select>
  <insert id="insertFun" parameterType="map">
    INSERT INTO SYS_FUN
    (FUN_ID, FUN_NAME, PARENT_ID, SORT_NUM, LEVEL_NUM, DELETED, CREATED_BY, CREATED_DATE, LAST_UPDATED_BY, LAST_UPDATED_DATE)
    VALUES 
    (#{funId,jdbcType=NUMERIC},#{funName,jdbcType=VARCHAR},#{parentId,jdbcType=NUMERIC},#{sortNum,jdbcType=NUMERIC},#{levelNum,jdbcType=NUMERIC},#{deleted,jdbcType=NUMERIC},
    #{createdBy,jdbcType=NUMERIC},#{createdDate,jdbcType=TIMESTAMP},#{lastUpdatedBy,jdbcType=NUMERIC}, #{lastUpdatedDate,jdbcType=TIMESTAMP})
  </insert>
  
  <delete id="deleteFun" parameterType="map">
    DELETE FROM SYS_FUN WHERE FUN_ID IN (SELECT FUN_ID FROM (SELECT FUN_ID FROM SYS_FUN) FUN WHERE FIND_IN_SET(FUN_ID, GET_FUNC_CHILDREN(#{funId,jdbcType=NUMERIC}))) 
  </delete>

  <update id="updateFun" parameterType="map">
    UPDATE SYS_FUN SET FUN_NAME = #{funName,jdbcType=VARCHAR},SORT_NUM = #{sortNum,jdbcType=NUMERIC},
    LAST_UPDATED_BY = #{lastUpdatedBy,jdbcType=NUMERIC}, LAST_UPDATED_DATE = #{lastUpdatedDate,jdbcType=TIMESTAMP}
    WHERE FUN_ID = #{funId,jdbcType=NUMERIC}
  </update>
  
  <update id="updateFunSortNum" parameterType="map">
    UPDATE SYS_FUN SET SORT_NUM = #{sortNum,jdbcType=NUMERIC},
    LAST_UPDATED_BY = #{lastUpdatedBy,jdbcType=NUMERIC}, LAST_UPDATED_DATE = #{lastUpdatedDate,jdbcType=TIMESTAMP}
    WHERE FUN_ID = #{funId,jdbcType=NUMERIC}
  </update>
  
  <update id="updateFunLevel" parameterType="map">
    UPDATE SYS_FUN SET LEVEL_NUM = #{levelNum,jdbcType=NUMERIC}, LAST_UPDATED_BY = #{lastUpdatedBy,jdbcType=NUMERIC}, LAST_UPDATED_DATE = #{lastUpdatedDate,jdbcType=TIMESTAMP} WHERE FUN_ID = #{funId,jdbcType=NUMERIC}
  </update>
  
  <update id="updateFunParent" parameterType="map">
    UPDATE SYS_FUN SET LEVEL_NUM =#{levelNum,jdbcType=NUMERIC},PARENT_ID = #{parentId,jdbcType=NUMERIC},LAST_UPDATED_BY = #{lastUpdatedBy,jdbcType=NUMERIC}, LAST_UPDATED_DATE = #{lastUpdatedDate,jdbcType=TIMESTAMP} WHERE FUN_ID = #{funId,jdbcType=NUMERIC}
  </update>
  
  <select id="selectFunctionsByRoleId" parameterType="int" resultType="int">
    SELECT FUN_ID FROM SYS_ROLE_FUN WHERE ROLE_ID = #{value,jdbcType=NUMERIC}
  </select>
  
  <select id="selectFunctionsByUserId" parameterType="int" resultMap="selectFunctionsByUserIdMap">
    <choose>
      <when test="value > 0">
        SELECT n.FUN_ID, SIGN(IFNULL(t.FUN_ID,0)) AS ENABLED FROM SYS_FUN n LEFT JOIN (SELECT FUN_ID FROM SYS_FUN f WHERE EXISTS (SELECT 1 FROM SYS_ROLE_FUN r, SYS_ROLE_USER u
        WHERE f.FUN_ID = r.FUN_ID AND r.ROLE_ID = u.ROLE_ID AND u.USER_ID = #{value,jdbcType=NUMERIC}) AND f.LEVEL_NUM = 4) t ON n.FUN_ID = t.FUN_ID AND n.LEVEL_NUM = 4
      </when>
      <otherwise>
        SELECT FUN_ID, SIGN(FUN_ID) AS ENABLED FROM SYS_FUN WHERE LEVEL_NUM = 4
      </otherwise>
    </choose>
  </select>

</mapper>